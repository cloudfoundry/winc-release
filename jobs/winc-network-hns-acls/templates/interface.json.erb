<%=
  def parse_ip (ip, var_name)
    unless ip.empty?
      ip = ip.split(":")[0]
	begin
	  parsed = IPAddr.new ip
	rescue  => e
	  raise "Invalid #{var_name} '#{ip}': #{e}"
	end
    end
  end

  def parse_ips(ips, var_name)
    ips.each do |ip|
      parse_ip(ip, var_name)
    end
  end

  parse_ip(p('winc_network.subnet_range'), 'winc_network.subnet_range')
  parse_ip(p('winc_network.gateway_address'), 'winc_network.gateway_address')
  parse_ips(p('winc_network.dns_servers'), 'winc_network.dns_servers')

  toRender = {
    "mtu" => p("winc_network.mtu"),
    "network_name" => "winc-nat",
    "subnet_range" => p("winc_network.subnet_range"),
    "gateway_address" => p("winc_network.gateway_address"),
    "dns_servers" => p("winc_network.dns_servers"),
    "maximum_outgoing_bandwidth" => p("winc_network.maximum_outgoing_bandwidth"),
    "search_domains" => p("winc_network.search_domains"),
    "allow_outbound_traffic_by_default" => p("winc_network.allow_outbound_traffic_by_default"),
    "wait_timeout_in_seconds" => p("winc_network.wait_timeout_in_seconds"),
  }

  JSON.pretty_generate(toRender)
%>
